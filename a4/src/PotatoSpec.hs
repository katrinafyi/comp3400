module PotatoSpec where

import Test.Hspec
import Data.List
import Data.Map
import Potato (encode)

game06_x = [(0,2), (3,2), (4,5), (5,2), (2,4), (4,7) ]
enco06_x = Nothing

game10_1 = [(0, 1), (1, 0), (0, 1), (1, 0), (0, 1), (1, 0), (0, 1), (1, 0), (0, 1), (1, 0)]
enco10_1 = Just [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]

game10_3 = [(0, 2), (2, 3), (3, 0), (0, 2), (2, 0), (0, 2), (2, 0), (0, 2), (2, 3), (3, 0)]
enco10_3 = Just [0, 2, 0, 2, 0, 2, 3, 0, 2, 3, 0]

game10_5 = [(0, 5), (5, 2), (2, 3), (3, 5), (5, 2), (2, 4), (4, 2), (2, 0), (0, 3), (3, 5)]
enco10_5 = Just [0, 3, 5, 2, 0, 5, 2, 4, 2, 3, 5]

game20_9 = [(0, 7), (7, 1), (1, 8), (8, 0), (0, 7), (7, 6), (6, 4), (4, 5), (5, 0), (0, 7), (7, 8), (8, 4), (4, 2), (2, 4), (4, 6), (6, 4), (4, 7), (7, 4), (4, 3), (3, 5)]
enco20_9 = Just [0, 7, 1, 8, 0, 7, 4, 2, 4, 3, 5, 0, 7, 6, 4, 6, 4, 7, 8, 4, 5]

game50 = [(0, 3), (3, 2), (2, 5), (5, 8), (8, 0), (0, 5), (5, 7), (7, 4), (4, 5), (5, 8), (8, 3), (3, 2), (2, 4), (4, 0), (0, 9), (9, 7), (7, 1), (1, 7), (7, 0), (0, 9), (9, 7), (7, 1), (1, 7), (7, 8), (8, 2), (2, 1), (1, 9), (9, 6), (6, 1), (1, 8), (8, 7), (7, 2), (2, 0), (0, 2), (2, 0), (0, 5), (5, 7), (7, 3), (3, 9), (9, 0), (0, 6), (6, 3), (3, 5), (5, 3), (3, 1), (1, 9), (9, 4), (4, 8), (8, 1), (1, 7)]
enco50 = Just [0, 2, 0, 3, 1, 7, 0, 5, 3, 2, 0, 5, 7, 1, 7, 1, 7, 2, 1, 8, 0, 6, 1, 9, 0, 9, 4, 0, 9, 6, 3, 2, 4, 5, 7, 3, 5, 8, 1, 9, 7, 4, 8, 2, 5, 8, 3, 9, 7, 8, 7]

game100 = [(0, 9), (9, 2), (2, 0), (0, 9), (9, 5), (5, 6), (6, 5), (5, 7), (7, 4), (4, 0), (0, 2), (2, 6), (6, 7), (7, 5), (5, 6), (6, 7), (7, 8), (8, 2), (2, 8), (8, 9), (9, 0), (0, 4), (4, 7), (7, 2), (2, 7), (7, 6), (6, 0), (0, 1), (1, 0), (0, 7), (7, 3), (3, 8), (8, 5), (5, 4), (4, 0), (0, 2), (2, 0), (0, 6), (6, 8), (8, 7), (7, 8), (8, 0), (0, 3), (3, 8), (8, 0), (0, 9), (9, 4), (4, 2), (2, 3), (3, 8), (8, 9), (9, 3), (3, 0), (0, 8), (8, 7), (7, 5), (5, 2), (2, 6), (6, 5), (5, 8), (8, 9), (9, 2), (2, 4), (4, 0), (0, 3), (3, 2), (2, 7), (7, 2), (2, 0), (0, 6), (6, 5), (5, 8), (8, 9), (9, 0), (0, 2), (2, 7), (7, 8), (8, 0), (0, 3), (3, 0), (0, 7), (7, 5), (5, 3), (3, 9), (9, 5), (5, 7), (7, 4), (4, 7), (7, 8), (8, 3), (3, 6), (6, 1), (1, 3), (3, 8), (8, 7), (7, 9), (9, 7), (7, 6), (6, 1), (1, 6)]
enco100 = Just [0, 1, 0, 2, 0, 2, 0, 2, 0, 3, 0, 3, 0, 3, 2, 3, 6, 0, 4, 0, 6, 1, 3, 8, 0, 6, 1, 6, 5, 2, 4, 0, 7, 2, 6, 5, 3, 8, 0, 7, 2, 6, 5, 4, 0, 8, 0, 9, 0, 9, 0, 9, 2, 7, 3, 8, 2, 7, 4, 2, 7, 4, 7, 5, 6, 7, 5, 6, 7, 5, 7, 6, 8, 3, 8, 5, 7, 8, 7, 8, 7, 8, 7, 8, 9, 2, 8, 9, 3, 9, 4, 7, 9, 5, 8, 9, 5, 8, 9, 7, 6]

game100_3 = [(0, 2), (2, 1), (1, 3), (3, 2), (2, 3), (3, 0), (0, 1), (1, 2), (2, 3), (3, 0), (0, 2), (2, 3), (3, 1), (1, 2), (2, 1), (1, 2), (2, 0), (0, 1), (1, 0), (0, 1), (1, 2), (2, 3), (3, 1), (1, 2), (2, 3), (3, 2), (2, 1), (1, 0), (0, 1), (1, 3), (3, 1), (1, 0), (0, 1), (1, 0), (0, 1), (1, 3), (3, 1), (1, 2), (2, 1), (1, 3), (3, 1), (1, 3), (3, 0), (0, 2), (2, 1), (1, 0), (0, 2), (2, 0), (0, 2), (2, 1), (1, 2), (2, 3), (3, 1), (1, 2), (2, 0), (0, 3), (3, 2), (2, 1), (1, 3), (3, 1), (1, 0), (0, 1), (1, 3), (3, 0), (0, 3), (3, 2), (2, 0), (0, 1), (1, 0), (0, 2), (2, 3), (3, 1), (1, 0), (0, 3), (3, 2), (2, 3), (3, 2), (2, 0), (0, 2), (2, 3), (3, 0), (0, 2), (2, 0), (0, 3), (3, 2), (2, 3), (3, 0), (0, 2), (2, 3), (3, 0), (0, 1), (1, 0), (0, 2), (2, 1), (1, 0), (0, 2), (2, 0), (0, 1), (1, 0), (0, 3)]
enco100_3 = Just [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 0, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 0, 2, 3, 0, 2, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 1, 2, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3]

game100_6 = [(0, 4), (4, 3), (3, 0), (0, 6), (6, 5), (5, 6), (6, 3), (3, 4), (4, 3), (3, 0), (0, 1), (1, 0), (0, 3), (3, 0), (0, 3), (3, 5), (5, 4), (4, 6), (6, 1), (1, 6), (6, 1), (1, 2), (2, 1), (1, 0), (0, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 4), (4, 2), (2, 4), (4, 0), (0, 4), (4, 3), (3, 2), (2, 4), (4, 2), (2, 1), (1, 3), (3, 4), (4, 5), (5, 3), (3, 1), (1, 3), (3, 2), (2, 6), (6, 5), (5, 4), (4, 3), (3, 0), (0, 5), (5, 4), (4, 0), (0, 4), (4, 2), (2, 3), (3, 0), (0, 6), (6, 3), (3, 1), (1, 5), (5, 1), (1, 3), (3, 1), (1, 5), (5, 2), (2, 0), (0, 4), (4, 6), (6, 5), (5, 6), (6, 2), (2, 6), (6, 5), (5, 4), (4, 2), (2, 5), (5, 2), (2, 6), (6, 4), (4, 0), (0, 3), (3, 6), (6, 4), (4, 2), (2, 6), (6, 0), (0, 2), (2, 5), (5, 2), (2, 1), (1, 5), (5, 1), (1, 5), (5, 0), (0, 3), (3, 2), (2, 3), (3, 5)]
enco100_6 = Just [0, 1, 0, 1, 0, 2, 0, 3, 0, 3, 0, 3, 0, 3, 0, 4, 0, 4, 0, 4, 0, 4, 2, 1, 2, 1, 2, 1, 2, 1, 3, 0, 5, 0, 6, 0, 6, 1, 3, 1, 3, 1, 4, 2, 1, 5, 1, 5, 1, 5, 2, 3, 1, 5, 2, 3, 2, 4, 2, 4, 2, 5, 2, 5, 3, 2, 6, 1, 6, 2, 6, 3, 2, 6, 3, 4, 2, 6, 4, 3, 4, 3, 5, 4, 3, 5, 4, 3, 6, 4, 5, 4, 6, 5, 4, 6, 5, 6, 5, 6, 5]

main' :: IO()
main' = hspec $ do
  describe "encode" $ do
    it "Bad game" $ do
        shouldBe (encode game06_x) enco06_x
    it "10 passes among 2 people" $ do
        shouldBe (encode game10_1) enco10_1
    it "10 passes among 3 people" $ do
        shouldBe (encode game10_3) enco10_3
    it "10 passes among 5 people" $ do
        shouldBe (encode game10_5) enco10_5
    it "20 passes among 10 people" $ do
        shouldBe (encode game20_9) enco20_9
    it "50 passes among 10 people" $ do
        shouldBe (encode game50) enco50
    it "100 passes among 10 people" $ do
        shouldBe (encode game100) enco100
    it "100 passes among 3 people" $ do
        shouldBe (encode game100_3) enco100_3
    it "100 passes among 6 people" $ do
        shouldBe (encode game100_6) enco100_6